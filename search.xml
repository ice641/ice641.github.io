<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>fhq-treap笔记</title>
    <url>/posts/6/</url>
    <content><![CDATA[<p>放一下自己的板子。</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gc getchar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>,inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll a = <span class="number">0</span>,b = <span class="number">0</span>;<span class="type">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span>||c &gt; <span class="string">&#x27;9&#x27;</span>) b = (c == <span class="string">&#x27;-&#x27;</span>),c = <span class="built_in">gc</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &gt;= <span class="string">&#x27;0&#x27;</span>&amp;&amp;c &lt;= <span class="string">&#x27;9&#x27;</span>) a = a * <span class="number">10</span> + c - <span class="number">48</span>,c = <span class="built_in">gc</span>();</span><br><span class="line">    <span class="keyword">return</span> b ? -a : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val,pri,siz;</span><br><span class="line">    <span class="type">int</span> ls,rs;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pir</span>&#123;<span class="type">int</span> l,r;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">treap</span> </span><br><span class="line">&#123;</span><br><span class="line">    node tr[N];</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!u) <span class="keyword">return</span> ;</span><br><span class="line">        node &amp;p = tr[u];</span><br><span class="line">        p.siz = tr[p.ls].siz + tr[p.rs].siz + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">pir <span class="title">split</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!rt) <span class="keyword">return</span> pir&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        node &amp;p = tr[rt];</span><br><span class="line">        pir o;</span><br><span class="line">        <span class="keyword">if</span>(p.val &lt; val)</span><br><span class="line">        &#123;</span><br><span class="line">            o = <span class="built_in">split</span>(p.rs,val);</span><br><span class="line">            p.rs = o.l;</span><br><span class="line">            o.l = rt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            o = <span class="built_in">split</span>(p.ls,val);</span><br><span class="line">            p.ls = o.r;</span><br><span class="line">            o.r = rt;		</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">upd</span>(rt);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l||!r) <span class="keyword">return</span> l + r;</span><br><span class="line">        node &amp;lp = tr[l],&amp;rp = tr[r];</span><br><span class="line">        <span class="keyword">if</span>(lp.pri &lt; rp.pri)</span><br><span class="line">        &#123;</span><br><span class="line">            rp.ls = <span class="built_in">merge</span>(l,rp.ls);</span><br><span class="line">            <span class="built_in">upd</span>(r);</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            lp.rs = <span class="built_in">merge</span>(lp.rs,r);</span><br><span class="line">            <span class="built_in">upd</span>(l);</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pir o = <span class="built_in">split</span>(rt,val);</span><br><span class="line">        tr[++idx] = node&#123;val,<span class="built_in">rand</span>(),<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        o.l = <span class="built_in">merge</span>(o.l,idx);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">merge</span>(o.l,o.r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">del</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node &amp;p = tr[rt];</span><br><span class="line">        <span class="keyword">if</span>(p.val &lt; val) p.rs = <span class="built_in">del</span>(p.rs,val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p.val == val)</span><br><span class="line">        &#123;</span><br><span class="line">            rt = <span class="built_in">merge</span>(p.ls,p.rs);</span><br><span class="line">            <span class="built_in">upd</span>(rt);</span><br><span class="line">            <span class="keyword">return</span> rt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> p.ls = <span class="built_in">del</span>(p.ls,val);</span><br><span class="line">        <span class="built_in">upd</span>(rt);</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_kth</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!rt) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        node p = tr[rt];</span><br><span class="line">        <span class="keyword">if</span>(p.val &lt; val) <span class="keyword">return</span> <span class="built_in">find_kth</span>(p.rs,val) + tr[p.ls].siz + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">find_kth</span>(p.ls,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_val</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!rt) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        node p = tr[rt];</span><br><span class="line">        <span class="keyword">if</span>(tr[p.ls].siz + <span class="number">1</span> &gt; k) <span class="keyword">return</span> <span class="built_in">find_val</span>(p.ls,k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[p.ls].siz + <span class="number">1</span> == k) <span class="keyword">return</span> p.val;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">find_val</span>(p.rs,k - tr[p.ls].siz - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_pre</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre = -inf;</span><br><span class="line">        <span class="keyword">while</span>(rt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tr[rt].val &lt; val) pre = tr[rt].val,rt = tr[rt].rs;</span><br><span class="line">            <span class="keyword">else</span> rt = tr[rt].ls;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_suc</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> suc = inf;</span><br><span class="line">        <span class="keyword">while</span>(rt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tr[rt].val &gt; val) suc = tr[rt].val,rt = tr[rt].ls;</span><br><span class="line">            <span class="keyword">else</span> rt = tr[rt].rs;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> suc;			</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T = <span class="built_in">read</span>(),rt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op = <span class="built_in">read</span>(),p = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) rt = t.<span class="built_in">ins</span>(rt,p);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">2</span>)	rt = t.<span class="built_in">del</span>(rt,p);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">3</span>)	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t.<span class="built_in">find_kth</span>(rt,p));</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">4</span>)	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t.<span class="built_in">find_val</span>(rt,p));</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">5</span>)	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t.<span class="built_in">find_pre</span>(rt,p));</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">6</span>)	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t.<span class="built_in">find_suc</span>(rt,p));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>树状数组笔记</title>
    <url>/posts/5/</url>
    <content><![CDATA[<p>用来放自己的板子。</p>
<span id="more"></span>
<p>单点修改区间查询：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll t[N],a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t[i] += a[i];</span><br><span class="line">        <span class="type">int</span> j = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(j &lt;= n) t[j] += t[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        t[x] += k;</span><br><span class="line">        x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">getsum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res += t[x];</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,a + i);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x,k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;k);</span><br><span class="line">            <span class="built_in">add</span>(x,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">getsum</span>(r) - <span class="built_in">getsum</span>(l - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>区间修改单点查询：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll t[N],a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t[i] += a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> j = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(j &lt;= n) t[j] += t[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        t[x] += k;</span><br><span class="line">        x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">getsum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res += t[x];</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,a + i);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l,r,k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line">            <span class="built_in">add</span>(l,k);<span class="built_in">add</span>(r + <span class="number">1</span>,-k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">getsum</span>(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>区间修改区间查询：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll t1[N],t2[N],a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll k = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">        t1[i] += k;t2[i] += k * (i - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> j = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(j &lt;= n) </span><br><span class="line">            t1[j] += t1[i],</span><br><span class="line">            t2[j] += t2[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll i = x - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        t1[x] += k;</span><br><span class="line">        t2[x] += k * i;</span><br><span class="line">        x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">getsum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>,i = x;</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res += i * t1[x] - t2[x];</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,a + i);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op,l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;op,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ll k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">            <span class="built_in">add</span>(l,k);<span class="built_in">add</span>(r + <span class="number">1</span>,-k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">getsum</span>(r) - <span class="built_in">getsum</span>(l - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>树状数组(Binary Index Tree)</tag>
      </tags>
  </entry>
</search>
